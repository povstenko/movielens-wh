{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "povsmovies"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Extract from CSV to DataLake",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "csv to datalake",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					},
					{
						"name": "Transform to Stage",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Extract from CSV to DataLake",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowStg",
								"type": "DataFlowReference"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Transform to Stage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "warehouse",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-08-16T08:16:27Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/warehouse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/warehouse')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DimGenreDimMovie",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowDimGenreDimMovie",
								"type": "DataFlowReference"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "BridgeAndFact",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "PopulateDimDate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflowBridgeAndFact",
								"type": "DataFlowReference"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "PopulateDimDate",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "DimGenreDimMovie",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[stg_PopDimDate]"
						},
						"linkedServiceName": {
							"referenceName": "movies_db",
							"type": "LinkedServiceReference"
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-08-16T15:06:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflowDimGenreDimMovie')]",
				"[concat(variables('factoryId'), '/dataflows/dataflowBridgeAndFact')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dim_Date')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "movies_db",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "warehouse"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "dateId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "year",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "isLeapYear",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "century",
						"type": "smallint",
						"precision": 5
					}
				],
				"typeProperties": {
					"schema": "warehouse",
					"table": "Dim_Date"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dim_Genre')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "movies_db",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "warehouse"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "genreId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "genre",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "warehouse",
					"table": "Dim_Genre"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowDimGenreDimMovie')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "moviesStage",
								"type": "DatasetReference"
							},
							"name": "moviesStg"
						},
						{
							"dataset": {
								"referenceName": "ratingsStage",
								"type": "DatasetReference"
							},
							"name": "ratingsStg"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "moviesDataMart",
								"type": "DatasetReference"
							},
							"name": "loadToDataMart"
						},
						{
							"dataset": {
								"referenceName": "Dim_Genre",
								"type": "DatasetReference"
							},
							"name": "DimGenre"
						},
						{
							"dataset": {
								"referenceName": "Dim_Movie",
								"type": "DatasetReference"
							},
							"name": "DimMovies"
						}
					],
					"transformations": [
						{
							"name": "AggregateRatings"
						},
						{
							"name": "JoinMoviesRatings"
						},
						{
							"name": "Select"
						},
						{
							"name": "SplitGenres"
						},
						{
							"name": "FlattenGenres"
						},
						{
							"name": "DistinctGenres"
						},
						{
							"name": "SortGenresByCount"
						},
						{
							"name": "AddSurrogateKey"
						},
						{
							"name": "SelectGenres"
						}
					],
					"script": "source(output(\n\t\tmovieId as integer,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> moviesStg\nsource(output(\n\t\tuserId as integer,\n\t\tmovieId as integer,\n\t\trating as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ratingsStg\nratingsStg aggregate(groupBy(movieId),\n\trating = avg(rating)) ~> AggregateRatings\nmoviesStg, AggregateRatings join(moviesStg@movieId == AggregateRatings@movieId,\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinMoviesRatings\nJoinMoviesRatings select(mapColumn(\n\t\tmovieId = moviesStg@movieId,\n\t\ttitle,\n\t\tgenres,\n\t\tyear,\n\t\trating\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Select\nSelect derive(splittedGenre = split(toString(genres), '|')) ~> SplitGenres\nSplitGenres foldDown(unroll(splittedGenre, splittedGenre),\n\tmapColumn(\n\t\tmovieId,\n\t\ttitle,\n\t\tgenres,\n\t\tyear,\n\t\trating,\n\t\tgenre = splittedGenre\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FlattenGenres\nFlattenGenres aggregate(groupBy(genre),\n\tcount = countDistinct(movieId)) ~> DistinctGenres\nDistinctGenres sort(desc(count, true)) ~> SortGenresByCount\nSortGenresByCount keyGenerate(output(genreId as long),\n\tstartAt: 1L) ~> AddSurrogateKey\nAddSurrogateKey select(mapColumn(\n\t\tgenreId,\n\t\tgenre\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectGenres\nSelect sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tmovieId as integer,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as integer,\n\t\trating as double\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> loadToDataMart\nSelectGenres sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tgenreId as integer,\n\t\tgenre as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> DimGenre\nSelect sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tmovieId as integer,\n\t\ttitle as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tmovieId,\n\t\ttitle\n\t)) ~> DimMovies"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Dim_Genre')]",
				"[concat(variables('factoryId'), '/datasets/Dim_Movie')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dim_Movie')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "movies_db",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "warehouse"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "movieId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "title",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "warehouse",
					"table": "Dim_Movie"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowBridgeAndFact')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "moviesDataMart",
								"type": "DatasetReference"
							},
							"name": "DMsource"
						},
						{
							"dataset": {
								"referenceName": "Dim_Genre",
								"type": "DatasetReference"
							},
							"name": "GenreDimmension"
						},
						{
							"dataset": {
								"referenceName": "Dim_Date",
								"type": "DatasetReference"
							},
							"name": "DateDimmension"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Bridge_MovieGenre",
								"type": "DatasetReference"
							},
							"name": "BridgeSink"
						},
						{
							"dataset": {
								"referenceName": "Fact_Rating",
								"type": "DatasetReference"
							},
							"name": "FactSink"
						}
					],
					"transformations": [
						{
							"name": "SplitGenres"
						},
						{
							"name": "FlattenGenres"
						},
						{
							"name": "JoinDimMovie"
						},
						{
							"name": "SelectKeys"
						},
						{
							"name": "JoinDimDate"
						}
					],
					"script": "source(output(\n\t\tmovieId as integer,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as integer,\n\t\trating as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DMsource\nsource(output(\n\t\tgenreId as integer,\n\t\tgenre as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> GenreDimmension\nsource(output(\n\t\tdateId as integer,\n\t\tyear as integer,\n\t\tisLeapYear as integer,\n\t\tcentury as integer\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> DateDimmension\nDMsource derive(splittedGenres = split(toString(genres), '|')) ~> SplitGenres\nSplitGenres foldDown(unroll(splittedGenres, splittedGenres),\n\tmapColumn(\n\t\tmovieId,\n\t\ttitle,\n\t\tyear,\n\t\trating,\n\t\tgenre = splittedGenres\n\t),\n\tskipDuplicateMapInputs: false,\n\tskipDuplicateMapOutputs: false) ~> FlattenGenres\nFlattenGenres, GenreDimmension join(FlattenGenres@genre == GenreDimmension@genre,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinDimMovie\nJoinDimDate select(mapColumn(\n\t\tmovieId,\n\t\trating,\n\t\tgenreId,\n\t\tdateId\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SelectKeys\nJoinDimMovie, DateDimmension join(FlattenGenres@year == DateDimmension@year,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinDimDate\nSelectKeys sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tmovieId as integer,\n\t\tgenreId as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tmovieId,\n\t\tgenreId\n\t)) ~> BridgeSink\nSelectKeys sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinput(\n\t\tratingId as integer,\n\t\tmovieId as integer,\n\t\tdateId as integer,\n\t\trating as double\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tmovieId,\n\t\tdateId,\n\t\trating\n\t)) ~> FactSink"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Dim_Genre')]",
				"[concat(variables('factoryId'), '/datasets/Dim_Date')]",
				"[concat(variables('factoryId'), '/datasets/Bridge_MovieGenre')]",
				"[concat(variables('factoryId'), '/datasets/Fact_Rating')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Bridge_MovieGenre')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "movies_db",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "warehouse"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "movieId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "genreId",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "warehouse",
					"table": "Bridge_MovieGenre"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Fact_Rating')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "movies_db",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "warehouse"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ratingId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "movieId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "dateId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "rating",
						"type": "float",
						"precision": 15
					}
				],
				"typeProperties": {
					"schema": "warehouse",
					"table": "Fact_Rating"
				}
			},
			"dependsOn": []
		}
	]
}